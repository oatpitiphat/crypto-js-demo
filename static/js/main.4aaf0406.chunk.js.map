{"version":3,"sources":["Crypto.js","App.js","reportWebVitals.js","index.js"],"names":["Crypto","useState","encryptedText","setEncryptedText","decryptedText","setDecryptedText","encodeBase64Text","setEncodeBase64Text","decodeBase64Text","setDecodeBase64Text","useForm","defaultValues","message","key","register","watch","watchMessageEn","watchMessageDe","watchMessageDeCode","watchKey","useEffect","encrpted","CryptoJS","AES","encrypt","toString","buffer","Buffer","from","bytes","decrypt","enc","Utf8","text","type","required","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8LA4FeA,IAxFA,WAEb,MAA0CC,mBAAS,IAAnD,mBAAOC,EAAP,KAAsBC,EAAtB,KACA,EAA0CF,mBAAS,IAAnD,mBAAOG,EAAP,KAAsBC,EAAtB,KAEA,EAAgDJ,mBAAS,IAAzD,mBAAOK,EAAP,KAAyBC,EAAzB,KACA,EAAgDN,mBAAS,IAAzD,mBAAOO,EAAP,KAAyBC,EAAzB,KAEA,EAA4BC,YAAQ,CAClCC,cAAe,CACbC,QAAS,GACTC,IAAK,MAHDC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,MAOZC,EAAiBD,EAAM,oBACvBE,EAAiBF,EAAM,oBACvBG,EAAqBH,EAAM,mBAC3BI,EAAWJ,EAAM,OAyBvB,OAvBAK,qBAAU,WACR,GAAIJ,EAAgB,CAClB,IAAMK,EAAWC,IAASC,IAAIC,QAAQR,EAAgBG,GAAUM,WAChEtB,EAAiBkB,GAEjB,IAAMK,EAASC,EAAOC,KAAKP,EAAU,SACrCd,EAAoBmB,EAAOD,SAAS,WAGtC,GAAIR,EAAgB,CAClB,IAAMY,EAAQP,IAASC,IAAIO,QAAQb,EAAgBE,GACnDd,EAAiBwB,EAAMJ,SAASH,IAASS,IAAIC,OAG/C,GAAId,EAAoB,CACtB,IACMe,EADSN,EAAOC,KAAKV,EAAoB,UAC3BO,SAAS,SACvBI,EAAQP,IAASC,IAAIO,QAAQG,EAAMd,GACzCV,EAAoBoB,EAAMJ,SAASH,IAASS,IAAIC,UAGjD,CAAChB,EAAgBC,EAAgBC,EAAoBC,IAGtD,qCACE,iCACE,gCACE,0CACA,mCAAOe,KAAK,QAAWpB,EAAS,MAAO,CACrCqB,UAAU,SAGd,gCACE,yDACA,mCAAOD,KAAK,QAAWpB,EAAS,mBAAoB,CAClDqB,UAAU,SAGd,gCACE,yDACA,mCAAOD,KAAK,QAAWpB,EAAS,mBAAoB,CAClDqB,UAAU,SAGd,gCACE,kEACA,mCAAOD,KAAK,QAAWpB,EAAS,kBAAmB,CACjDqB,UAAU,YAKhB,4BACE,kDAAqBjC,OAEvB,4BACE,kDAAqBE,OAEvB,4BACE,wDAA2BE,OAE7B,4BACE,sDAAyBE,a,+LCzElB4B,MAVf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAlB,SACE,cAACrC,EAAA,EAAD,SCKOsC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.4aaf0406.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport CryptoJS from \"crypto-js\";\r\n\r\nconst Crypto = () => {\r\n\r\n  const [encryptedText, setEncryptedText] = useState('');\r\n  const [decryptedText, setDecryptedText] = useState('');\r\n\r\n  const [encodeBase64Text, setEncodeBase64Text] = useState('');\r\n  const [decodeBase64Text, setDecodeBase64Text] = useState('');\r\n\r\n  const { register, watch } = useForm({\r\n    defaultValues: {\r\n      message: '',\r\n      key: ''\r\n    }\r\n  });\r\n\r\n  const watchMessageEn = watch(\"messageToEncrypt\");\r\n  const watchMessageDe = watch(\"messageToDecrypt\");\r\n  const watchMessageDeCode = watch(\"messageToDecode\");\r\n  const watchKey = watch(\"key\");\r\n\r\n  useEffect(() => {\r\n    if (watchMessageEn) {\r\n      const encrpted = CryptoJS.AES.encrypt(watchMessageEn, watchKey).toString();\r\n      setEncryptedText(encrpted);\r\n\r\n      const buffer = Buffer.from(encrpted, 'utf-8');\r\n      setEncodeBase64Text(buffer.toString('base64'));\r\n    }\r\n\r\n    if (watchMessageDe) {\r\n      const bytes = CryptoJS.AES.decrypt(watchMessageDe, watchKey)\r\n      setDecryptedText(bytes.toString(CryptoJS.enc.Utf8));\r\n    }\r\n\r\n    if (watchMessageDeCode) {\r\n      const buffer = Buffer.from(watchMessageDeCode, 'base64');\r\n      const text = buffer.toString('ascii');\r\n      const bytes = CryptoJS.AES.decrypt(text, watchKey)\r\n      setDecodeBase64Text(bytes.toString(CryptoJS.enc.Utf8));\r\n    }\r\n\r\n  }, [watchMessageEn, watchMessageDe, watchMessageDeCode, watchKey])\r\n\r\n  return (\r\n    <>\r\n      <form>\r\n        <div>\r\n          <label>Key: </label>\r\n          <input type=\"text\" {...register(\"key\", {\r\n            required: true\r\n          })} />\r\n        </div>\r\n        <div>\r\n          <label>Message to encrypt: </label>\r\n          <input type=\"text\" {...register(\"messageToEncrypt\", {\r\n            required: true\r\n          })} />\r\n        </div>\r\n        <div>\r\n          <label>Message to decrypt: </label>\r\n          <input type=\"text\" {...register(\"messageToDecrypt\", {\r\n            required: true\r\n          })} />\r\n        </div>\r\n        <div>\r\n          <label>Message to decode + decrypt: </label>\r\n          <input type=\"text\" {...register(\"messageToDecode\", {\r\n            required: true\r\n          })} />\r\n        </div>\r\n      </form>\r\n\r\n      <p>\r\n        <span> Encrypt AES: {encryptedText}</span>\r\n      </p>\r\n      <p>\r\n        <span> Decrypt AES: {decryptedText}</span>\r\n      </p>\r\n      <p>\r\n        <span> Encrypt to Base64: {encodeBase64Text}</span>\r\n      </p>\r\n      <p>\r\n        <span> Decrypt to text: {decodeBase64Text}</span>\r\n      </p>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Crypto;","import './App.css';\nimport Crypto from './Crypto';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Crypto />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}